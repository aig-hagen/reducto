#include "../../include/logic/SatSolverCadical.h"

SatSolverCadical::SatSolverCadical(uint32_t n_vars)
{
    solver = new CaDiCaL::Solver;
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

void SatSolverCadical::add_assumption(int64_t assumption) {
    solver->assume(assumption);
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

void SatSolverCadical::add_clause(std::vector<int64_t> &clause) {
    // Add the clause to the CMS solver
    for (auto literal : clause) {
        solver->add(literal);
    }
    solver->add(0); // Terminate clause with 0
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

void SatSolverCadical::add_clause_short(int64_t lit1, int64_t lit2) {
    solver->add(lit1);

    if (lit2 != 0)
    {
        solver->add(lit2);
    }

    solver->add(0); // Terminate clause with 0
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

std::uint8_t SatSolverCadical::check_var_model(int64_t variable) {
    return solver->val(variable) > 0;
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/


bool SatSolverCadical::solve() {
    // Solve the SAT problem using the CMS solver
    return solver->solve() == 10; // Returns true if a solution is found, false otherwise
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

bool SatSolverCadical::solve(int64_t assumption) {
    solver->assume(assumption);
    return solve();
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

bool SatSolverCadical::solve(int64_t assumption1, int64_t assumption2) {
    solver->assume(assumption1);
    solver->assume(assumption2);
    return solve();
}