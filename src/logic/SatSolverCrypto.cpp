
#ifdef SAT_CMSAT

#include "../../include/logic/SatSolverCrypto.h"

using namespace std;
using namespace CMSat;

SatSolverCrypto::SatSolverCrypto(uint32_t num_args)
{
    solver.set_num_threads(1);
    solver.new_vars(2 * num_args);
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

void SatSolverCrypto::add_assumption(int64_t lit) {
    int32_t var = abs(lit) - 1;
    assumptions.push_back(Lit(var, lit < 0));
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

void SatSolverCrypto::add_clause(std::vector<int64_t> &clause) {
    vector<Lit> lits(clause.size());
    for (uint32_t i = 0; i < clause.size(); i++) {
        int32_t var = abs(clause[i]) - 1;
        lits[i] = Lit(var, clause[i] < 0);
    }
    solver.add_clause(lits);
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

void SatSolverCrypto::add_clause_1(int32_t lit) {
    int32_t var = abs(lit) - 1;
    vector<Lit> lits = { Lit(var, lit < 0) };
    solver.add_clause(lits);
}

void SatSolverCrypto::add_clause_2(int32_t lit1, int32_t lit2) {
    int32_t var1 = abs(lit1) - 1;
    int32_t var2 = abs(lit2) - 1;
    vector<Lit> lits = { Lit(var1, lit1 < 0), Lit(var2, lit2 < 0) };
    solver.add_clause(lits);
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

void SatSolverCrypto::add_clause_short(int64_t lit1, int64_t lit2) {

    if (lit2 == 0)
    {
        add_clause_1(lit1);
    }
    else
    {
        add_clause_2(lit1, lit2);
    }
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

std::uint8_t SatSolverCrypto::check_var_model(int64_t variable) {
    return solver.get_model()[variable - 1] == l_True;
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/


bool SatSolverCrypto::solve() {
    bool is_satisfiable = solver.solve(&assumptions) == l_True;
    assumptions.clear();
    return is_satisfiable; // Returns true if a solution is found, false otherwise
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

bool SatSolverCrypto::solve(int64_t assumption) {
    add_assumption(assumption);
    return solve();
}

/*===========================================================================================================================================================*/
/*===========================================================================================================================================================*/

bool SatSolverCrypto::solve(int64_t assumption1, int64_t assumption2) {
    add_assumption(assumption1);
    add_assumption(assumption2);
    return solve();
}

#endif