 ________________________________________________________________________________________________________________________________________________________________
||									ParallelSolver	(PS)									||
||______________________________________________________________________________________________________________________________________________________________||
||									   Version: 1.55									||
||______________________________________________________________________________________________________________________________________________________________||
||									   created by										||
||					Lars Bengel	 	University of Hagen 		<lars.bengel@fernuni-hagen.de>					||
||					Julian Sander	 	University of Hagen 		<julian.sander@fernuni-hagen.de>				||
||					Matthias Thimm	 	University of Hagen 		<matthias.thimm@fernuni-hagen.de>				||
||______________________________________________________________________________________________________________________________________________________________||
||								Supported problems: [DS-PR]									||
||______________________________________________________________________________________________________________________________________________________________||
||								Supported file-formats : [.i23]									||
||______________________________________________________________________________________________________________________________________________________________||


Description:
- SAT clauses basically taken from 
		Bengel, Lars, and Matthias Thimm. "Towards parallelising extension construction for serialisable semantics in abstract argumentation." Proceedings of the 20th International Conference on Principles of Knowledge Representation and Reasoning. 2023.
- added clause in encoding to enforce the calculation of only complete sets of arguments as shown in Cerutti, F., Giacomin, M. and Vallati, M., 2019. How we designed winning algorithms for abstract argumentation and which insight we attained. Artificial Intelligence, 276, pp.1-40.
- no minimalization clauses

- completion of extensions is disabled, therefor the solver returns only an admissible but not a preferred extension to proof the rejection of an argument
- checks for self attacking arguments if empty IS found or only 1 argument left in reduct
- checks if query argument is in extention, if no IS is found in a reduct  (no IS in reduct -> extension is maximal -> if maximal extension does not include query then not sceptically accepted
- sat solver used: CaDiCal
- added lean method to add short clauses with up to 2 arguments
- improved parsing using stringstream
- uses a c++ data model
- only supports CaDiCal as Sat solver
- only active arguments implemented as 2 vectors, one for iterating and the other for O(1) queries of existance
- attackers / victims only implemented as simple Vector, existance queries are answered using the unordered_set of attacks
- use unordered_set for keeping extensions instead of  priority queue or omp Task, only the X first priorities are kept in dedicated buckets, all other are out in buckets of leftovers
- do not intertupt solving all admissible sets in the current state
- only add extensions once to unordered_set and mark them with flag if one thread picks them up
- uses new class structure, which better structures the code
- formulates complement clause, to prevent subset from being recalculated, but enables calculation of superset of found solutions
- only calculate adm. set which do not include the query argument
- no limitation of iterations per reduct
- preprocessing for each reduct:
	- reduce every calculated reduct by its grounded extension
	- calculate cone of influence for each reduct

- preprocessing:
	- check self attack of query -> if true rejects query
	- check existance of attackers of query -> if no attackers accept query
	- check if query is in grounded extension, if yes accept
	- check if query gets attacked by argument of grounded extension, if yes reject
	- reduce active arguments by grounded extension before calculation  (optimized check for unattacked arguments)
	- set only cone of influence of query as active arguments

-heuristics:
	- prioritize extension according to the percentage of arguments of the original framework which they attack, the higher the percentage, the lower the priority
	- punish existance of defenders of query in calculated set